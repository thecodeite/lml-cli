#!/usr/bin/env ruby

require 'date'
require 'net/http'
require 'net/https'
require 'json'
require 'readline'

puts OpenSSL::X509::DEFAULT_CERT_FILE
puts OpenSSL::X509::DEFAULT_CERT_DIR

#look in current dir for config
if File.file?('./.lml') then
  File.open('./.lml') { |file|
    $config = JSON.parse(file.read)
  }
elsif File.file?(File.expand_path('~/.lml')) then
  File.open(File.expand_path('~/.lml')) { |file|
    $config = JSON.parse(file.read)
  }
else
  puts "No config"
  exit
end

puts $config

$today = Date.today
$apiBaseUrl = $config["api"]
$dayResourceTemplate = "#{$apiBaseUrl}/days/%s/"
$datumResourceTemplate = "#{$apiBaseUrl}/days/%s/datum/%s"
$history = []
$historyPos = 0
$historyFile = File.expand_path('~/.lmlhistory')

if File.file?($historyFile) then
  File.open($historyFile) {|f|
    f.each_line{|line|
      Readline::HISTORY.push line.chomp
    }
  }
else
  File.open($historyFile, "w") {}
end

$alive = true

commands = {
  "exit" => lambda {|args| quit()},
  "end" => lambda {|args| quit()}, 
  "quit" => lambda {|args| quit()},

  "ls" => lambda {|args| list()},
  "list" => lambda {|args| list()},
  "set" => lambda {|args| set(args)},
  "delete" => lambda {|args| delete(args)},

  "n" => lambda{|args| go(['+1'])},
  ">" => lambda{|args| go(['+1'])},
  "next" => lambda{|args| go(['+1'])},
  "p" => lambda{|args| go(['-1'])},
  "<" => lambda{|args| go(['-1'])},
  "prev" => lambda{|args| go(['-1'])},

  "go" => lambda{|args| go(args)},
}

command_names = commands.keys.sort
LIST = command_names
comp = proc { |s|LIST.grep(/^#{Regexp.escape(s)}/) } 
Readline.completion_append_character = " "
Readline.completion_proc =  comp

def go(args)
  target = args[0].downcase

  if target == "today" then
    $today = Date.today
  elsif (Date.parse(target) rescue false) then
    $today = Date.parse(target)
  elsif target.start_with?('+') and ( Integer(target[1..-1]) rescue false) then
    $today = $today + Integer(target[1..-1]) 
  elsif target.start_with?('-') and ( Integer(target[1..-1]) rescue false) then
    $today = $today - Integer(target[1..-1]) 
  else
    puts "Don't know how to go to #{target}"
    return
  end
    
  list()
end

def todayIso()
  $today.strftime('%F')
end

def quit()
  puts "Bye!"
  $alive = false
end

def set(args)
  set = args[0];

  key,value = set.split('=')

  url = $datumResourceTemplate % [todayIso(), key]
  uri = URI.parse(url)

  path = $datumResourceTemplate % [todayIso(), key]
  body = '{"value": "'+value+'"}'
  req = Net::HTTP::Put.new(path, initheader = {'Content-Type' => 'application/json'})
  req.body = body
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = (uri.scheme == "https")
  resp = http.start {|http| http.request(req) }
  puts resp.code
 
end

def delete(args)
  key = args[0];

  url = $datumResourceTemplate % [todayIso(), key]
  uri = URI.parse(url)

  http = Net::HTTP::Delete.new(uri.path, initheader = {'Content-Type' => 'application/json'})

  http.use_ssl = (uri.scheme == "https")
  http = Net::HTTP.new(uri.host, uri.port)
  resp = http.start {|http| http.request(req) }
  puts resp.code
 
end

def list()
  url = $dayResourceTemplate % [todayIso()]
  uri = URI.parse(url)

  req = Net::HTTP::Get.new(uri.path)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = (uri.scheme == "https")
  resp = http.start {|http| http.request(req) } 
  parsed = JSON.parse(resp.body)

  dps = parsed["dataPoints"]
  dps.each do |k,v| 
    puts "#{k}: #{v}"
  end
end

list()
while $alive do

  #LIST = command_names

  prompt = $today.strftime("%F> ")
  cmd = Readline.readline(prompt, true)

  $history.push(cmd)
  open($historyFile, 'a') { |f|
    f.puts cmd
  }

  args = cmd.split(' ')
  command = args.shift

  if commands.has_key?(command) then
    commands[command].call(args)
  else
    puts "Unknown command"
  end

end
